This service allows web applications using Geodi Feed API, either for application-to-GEODI data feeding or GEODI-to-application service integration, to share authority or role information. It is an optional service, not mandatory. Implementation is not required if permission definitions for FeedApi are provided as LDAP group/user Sid values; it is only required if the application has submitted its own roles or definitions.

Requests for this service are directed to addresses defined under GEODI / Settings / RoleProvider. Only a system administrator with access to this address can add this definition, and sample contents are available in a specified folder. If custom authorization is used for FeedApi, the address of the Role/Authorization service should be obtained from the system administrator who provided the GEODI Token and identified in the settings. If a .NET SOAP API is implemented that takes the same parameters and returns the same object as output, an attribute should be added to the method.

The service request uses the format `[ServiceURL]?m=GetRoles&user={username}`. Both `{user}` or `{username}` parameters can be used in the ServiceURL. Even if these parameters are not explicitly used, `request-user` and `request-username` information is passed in the HTTP Header content. The `{user}` parameter represents the unique name of the user logged into GEODI, translated to lowercase via InvariantCulture, and includes login method information, such as `ldap:domain\user.name`, `geodi:geodiadmin`, `facebook:id`, or `yourapplication:user.id`. The `{username}` parameter only returns a username without domain information for LDAP users.

GEODI supports multiple user authentication mechanisms. Such a request can only be made if the application supports OAuth or OAuth2 with necessary definitions in GEODI, or if an ILoginProvider implementation is defined on GEODI; in these cases, verification is assumed to be done by the application. An empty list or content can be returned for unrecognized users. Security can be increased by adding additional parameters to the ServiceURL definition and requesting additional Headers using the definition setting file on GEODI. The HTTP method for requests is GET. Expected errors include 401 Unauthorized access/Access denied, 403 Forbidden, and 511 Network Authentication Required.

An example GEODI settings file for a role provider includes `DisplayName` as "Sample Role Provider", `__type` as "Factory.ActionFactory:ServerBasedRoleProvider", and `ServiceURL` as "http(s)://myhost/GetRoleService.ashx?user={user}&username={username}". It also specifies `GEODIRequestHeader` as "GEODI_Request" and `ActionTargets` as "*".

The expected result for the service is a JSON object containing a `Roles` array, such as `{ Roles: [] }`. This `Roles` array is a string array that contains the roles or detailed privileges of the transmitted user. A user is authorized for all documents in the Permit definitions if they possess any of these roles. Alternatively, roles can be returned as a comma-separated string like `Rol1,Rol2,group:GeodiGroupName/ID`.

For GEODI versions 6.1.0.21248 or above, rules can also be transmitted in the result, which includes `Roles`, `OnlyDenyCheck`, `Conditions`, and `Groups` arrays. In this advanced format, the `Roles` array still contains roles/detail privileges, authorizing a user for documents in Permit definitions and prohibiting them from documents in Deny definitions based on these roles. If the `Roles` definition contains statements within a rule, the authorization rule from the `Roles` definition will override.

The `OnlyDenyCheck` array, when present, causes permit definitions for transmitted roles to be ignored, with only prohibitions in Deny definitions being checked. If a Deny definition is found, the document is not shown. The `Conditions` array allows for rule creation using "And", "Or", and "-" operators, applied if role lists defined in parentheses contain at least one of these. Parentheses must be used even for single roles. A comma (,) should be used as the delimiter, and space characters not part of the role definition should be avoided. If a role in a list is passed as Deny for the document, the list is considered false for that document. Multiple rules in the array are combined with 'or'. Examples include `(Rol1,Rol2) and (Cat1,Cat2)` for documents with Rol1/Rol2 and Cat1/Cat2, `((Rol1,Rol2) and (Cat1,Cat2)) or (AllPublic)` for documents with Rol1/Rol2 and Cat1/Cat2 or AllPublic, and `(Rol1,Rol2) and -(Cat1,Cat2)` for documents with Rol1/Rol2 but not Cat1/Cat2. It is recommended to use at least one unused group as GEODI evaluates all roles together.

The `Groups` array is available for GEODI versions 6.1.0.24366 or above. It indicates that the user is part of a GEODI group. While other features primarily manage document viewing authorization, the `Groups` feature allows management of all other privileges defined on GEODI, such as editing, adding notes, and viewing Source/Enumerator.

An example request `[ServiceURL]?m=GetRoles&user=ldap:domain\user.name` can return a JSON object with roles like `{ Roles: [ 'S-151...','Administrator','Document1'] }` or a comma-separated string like `S-151...,Administrator,Document1`. For GEODI 6.1.0.21248 and above, a request can return a structured result including `Roles`, `OnlyDenyCheck`, and `Conditions`. For instance, a user with `Roles: ['AllPublic']`, `OnlyDenyCheck: ['CantSeeIfSecret']`, and `Conditions: ['(Rol1,Rol2) and (Cat1,Cat2) and -(T1)']` will see documents with 'AllPublic' in their Permit Value, cannot see documents with 'Deny AllPublic' in their Permit Value, and cannot see documents with 'CantSeeIfSecret' in their Deny definition. This user can also view documents containing 'Rol1' or 'Rol2' and 'Cat1' or 'Cat2' at the Permit value, provided they do not contain the 'T1' role. Condition definitions do not alter the results from `Roles` or `OnlyDenyCheck`.

An example application for this service is a .Net 3.5 WebHandler written in C#. A .NET sample WebHandler is available.