In GEODI 5.1 and above versions, automatic notifications can be provided when a searched phrase is encountered. Tasks can be scheduled to run at specific times using jSettings files, which are to be placed in the `Settings/Notifications/TimedNotification` folder, and these files can also specify emails to be sent. Definitions placed in this folder do not contain a Macro object. Geodi/Mobidi Office operates independently of specific applications. If a subreport is utilized, any referenced objects must access themselves through "Context." Event information can be accessed using `c.GetHttpItem("NoticifationArgs")` in environments that support macros.

The `Factory.ActionFactory: TimedSendMail` object is designed for sending emails at a specified time. Its configuration includes `BodyReport`, which is the HTML report definition path for the email body, with examples found under `Settings/Notifications/Templates`. It also supports `Attachments`, which is a list where each attachment specifies a `Report` definition path (supporting Zip, HTML, Excel, and CSV formats, with examples also in `Settings/Notifications/Templates`) and an optional `DisplayName` for the attachment file. If `DisplayName` is not defined, the file is named with an additional order number.

Further `TimedSendMail` definitions include `Subject`, which is the email header and supports simple macros like `[Query]` for the query used and `[TotalDoc]` for the number of results found. `ToMail` allows sending messages to email addresses and also supports macros. If `Language` is defined, all localization processes within the email are performed using that specified language. The `Timed` attribute is crucial for determining the email's start time and repeat period, with an example showing a configuration that runs every Friday at 22:30. Additionally, `Attributes` allow content to be accessed using a key, such as `c.GetHttpItem("MyNameAttribute")`, in environments where macros can be used.

An example configuration for `Factory.ActionFactory: TimedSendMail` specifies a `BodyReport` path as `%App%\Settings\Notifications\Templates\MySimpleReport.html`, a `Subject` of "Informative message", and `ToMail` addresses. The `Timed` setting for this example is configured with `Period: { "PeriodType": "Week", "Value": 1 }` and `Offset: { "Days": 6, "Hours":22 , Minutes:30 }`, which schedules the email to run weekly, specifically on Fridays at 22:30.

The `Factory.ActionFactory: TimedRunCommand` object is used for running command line tasks. Its request structure includes `FileName`, which is a mandatory definition, while `Arguments`, `UseShellExecute`, `CreateNoWindow`, `WorkingDirectory`, `UserName`, `Password`, and `Timeout` are optional. These definitions are equivalent to features found in `ProcessStartInfo`. The `Timed` attribute within this object is used to determine the start time and repeat period for the command line task.

An example configuration for `Factory.ActionFactory: TimedRunCommand` specifies the `FileName` as `%SystemX86%\cmd.exe ping 127.0.0.1 -r 9`. The `Timed` setting for this example is configured with `Period: { "PeriodType": "Day", "Value": 1 }` and `Offset: { "Hours":10 , Minutes:0 }`, which schedules the command to run daily at 10:00.

The `ScheduleSettings` object is employed within the `Timed` definition for time scheduling. The "Period" attribute defines the beginning of the repetition period. For instance, setting `PeriodType` to "Day" with a `Value` of 2 triggers the task at 0:00 every night for two days. A `PeriodType` of "Week" with a `Value` of 1 sets the trigger time to 0:00 every Sunday, and a `PeriodType` of "Hour" with a `Value` of 1 triggers the task every hour at 0 minutes.

The "Offset" attribute is used to modify the trigger time. For example, if `Period.PeriodType` is "Day" and `Offset.Hours` is set to 1, the trigger time is delayed to 01:00 instead of 00:00 at night. If `Period.PeriodType` is "Hour" and `Offset.Minute` is set to 15, the trigger time will be delayed by 15 minutes every hour. Additionally, the `Start` attribute prevents a task from running before a specified date, and the `End` attribute prevents it from running after a specified date; if either is left empty, no date limit is applied.

Examples of time definitions include scheduling a task for "Everyday at 10:20" using `Period: { PeriodType: "Day" }, Offset: { Hours:10, Minutes:20 }`. For "Every Friday at 17:00", the configuration is `Period: { PeriodType: "Week" }, Offset: { Days:6 , Hours:17, Minutes:0 }`. To schedule for the "Second calendar day of each month, 15:00", the settings are `Period: { PeriodType: "Month" }, Offset: { Days:2 , Hours:15, Minutes:0 }`.

Further time definition examples include scheduling for the "Fourth business day of the month 09:00" using `Period: { PeriodType: "Month" }, Offset: { Days:4 , Hours:9, Minutes:0 }, DayCounting:"WorkDays"`. For "The third quarter of every year", the setting is `Period: { PeriodType: "Quarter", Value:3 }`. To schedule for "The first working day of every January 09:00", the configuration is `Period: { PeriodType: "Year" }, Offset: { Hours:9, Minutes:0 }, DayCounting:"WorkDays"`.

Additional time definition examples include scheduling for "15:00 on the first Tuesday of every month" using `Period: { PeriodType: "Mounth" }, Offset: { Days:3, Hours:15, Minutes:0 }`. A similar configuration for "The first Tuesday of the month or the first business day after 15:00" also uses `Period: { PeriodType: "Mounth" }, Offset: { Days:3, Hours:15, Minutes:0 }`, but adds `DayCounting:"WorkDays"`. Finally, to schedule a task "Every hour between 2 dates", the configuration specifies `Start:"2019-12-02"`, `End:"2019-12-10"`, and `Period: { PeriodType: "Hour" }`.