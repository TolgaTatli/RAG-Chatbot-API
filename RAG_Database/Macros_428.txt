Macros are pieces of code specified by developers that run on the server. They can be used in Reports, javascript files, HTML, and Map CSS. While some simplifications have been made in the syntax based on the place of use, the general usage is as described in this document. The macro language is set to C#, allowing all methods of the object accessed via the API to be used.

Macros are generally defined using the syntax [= ...]. However, Map CSS and some particular fields do not use square brackets, and information on this can be found in the relevant documents. When square brackets are used inside a macro, they should be written as \] instead of ], a rule that also applies to any other character reserved for JSON.

Some Macros may evaluate a value, while others check a visibility condition. Within a macro, all C# classes and GEODI/MOBIDI Specific classes can be used, with the 'd' (Data) and 'c' (Context) classes being important. Examples of macros include [=4*4], [=new Random().Next(0,500)], [=Math.Round(0.47)], [=DateTime.Now], and [="test".ToUpper()].

The Data (d) Object's type varies depending on where it is used, and its specific type will be defined in the related documentation. A readme file where definitions are placed will also contain this information. For example, in GEODI reports, the Data object is a GeodiEntry, meaning every row is a GeodiEntry. An example of its use is [=d.OutputGeodiContent.DisplayName] for a file name.

The Context (c) Object is available wherever a macro is used and is an EvaluatorContext object. It includes helper methods and information about maps, such as details about the geometry being drawn and the scale level. An example of its use is [=c.ToString(DateTime.Now,"en-US","dd MMM yyyy")]. The context contains a limited number of helper methods, but more can be accessed via the context ["HelperName"] method, and a list of all helper classes is available externally.

A ConditionMacro serves as a visibility condition for items such as reports, dashboards, or other definitions, and it must evaluate to true or false. An example is checking if an Active Workspace has the XX_Enable key set to true, as shown by ConditionMacro:'["geodi"].GetWS().GetGenericSetting ("XX_Enable",false)'. Another example is verifying if a user is a member of the ACC.Discovery group, demonstrated by "ConditionMacro":'=c.HasPermission("Group:ACC.Discovery")'.