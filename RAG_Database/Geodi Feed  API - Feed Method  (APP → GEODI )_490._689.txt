The feed method operates when an application transmits information to GEODI, specifically in instances of changes in data or privileges. This method functions as the opposite of the service connection method. It requires information from an authorized user who possesses the rights to add a data layer on GEODI. This method can be utilized to send any quantity of content at any time if the application is operational, if there are internal methods to trigger, or if a Web application is not available.

The Multiple Content Feed, known as BulkFeed, forwards contents to GEODI as a result of a BulkFeed call. GEODI provides only status information without waiting for the call to complete. This method is suitable for sending multiple contents, whereas the Feed method is more convenient for sending single content.

To make a BulkFeed request, the URL pattern is `[GEODIURL]/FeedHandler?op=BulkFeed&Content=[ContentJson]&UserSession=[Token]`. The `UserSession` parameter requires a feed authorized Token, which must be obtained from the system administrator. The Token rendering interface is accessible from `[geodiurl]/API`. The `wsName` parameter is optional and must be passed if the provided Token is authorized to feed multiple projects. Similarly, the `enumeratorID` parameter is optional and must be passed if the provided Token is authorized to feed multiple sources (geodi enumerator). The `content` parameter is a JSON object that contains content information. Both GET and POST HTTP methods are supported for this request.

Expected errors for the BulkFeed method include: 401 Unauthorized access / Access denied, 403 Forbidden, 511 Network Authentication Required, 501 Server Error, 470 Unsupported extension / Server configuration error, 471 Content Required, 481 This Token cannot access any workspaces, 453 wsName Required (if Token can feed multiple projects), 452 enumeratorID Required (if Token can feed multiple projects), and 480 wsname or enumeratorID is not accessible (if Token does not have sufficient authority).

The return value for a BulkFeed call is "OK". This indicates that scanning has started. If no error is received, the scan begins, and it is not necessary to check the result.

Example applications for the Multiple Content Feed (BulkFeed) method include .Net 3.5 WebHandler (C#), .net sample WebHandler, and .Net WinForm (C#).

The Single Content Feed, known as Feed, forwards contents to GEODI as a result of a BulkFeed call. GEODI returns only status information without waiting for the call. While suitable for sending multiple content, the Feed method is more convenient for sending single content.

To make a Feed request, the URL pattern is `[GEODIURL]/FeedHandler?op=Feed&Content=[ContentJson]&UserSession=[Token]`. The `content` parameter is a JSON object containing content information, and it is preferred to send this by POST because JSON can grow more than expected. The `UserSession` parameter requires a feed authorized Token, which must be received from the system administrator, with the Token rendering interface accessible from `[geodiurl]/API`. The `wsName` parameter is optional and must be passed if the provided Token is authorized to feed multiple projects. The `enumeratorID` parameter is also optional and must be passed if the provided Token is authorized to feed multiple sources (geodi enumerator). Both GET and POST HTTP methods are supported for this request.

Expected errors for the Single Content Feed method include: 401 Unauthorized access / Access denied, 403 Forbidden, 511 Network Authentication Required, 501 Server Error, 470 Unsupported extension / Server configuration error, 471 Content Required, 481 This Token cannot access any workspaces, 453 wsName Required (if Token can feed multiple projects), 452 enumeratorID Required (if the Token can feed multiple projects), and 480 wsname or enumeratorID is not accessible (if Token does not have sufficient authority).

The return value for a Feed call is "OK". This indicates that scanning has started. If no error is received, the scan begins, and it is not necessary to check the result.

Example applications for the Single Content Feed method include .Net 3.5 WebHandler (C#), .Net WinForm (C#), and HTML - Javascript.

Sub-content can be added to an existing content item in GEODI using two distinct methods. If no authorization is defined for a child content, it inherits the rights of its parent. However, if authorization is explicitly defined for a child content, only those defined privileges are used, and it does not inherit from the parent.

One method for adding sub-content involves using the `ParentContentIdOrURL` value. This allows linking content that is being fed at any time to previously existing content. An example demonstrates a main document object followed by a sub-document object that includes a `ParentContentIdOrURL` property pointing to the main document's URL.

The second method for adding sub-content allows passing subcontents of a main content in bulk using the `SubContents` object. An example illustrates a main document object that contains a `SubContents` array, which then holds the sub-document object.

The Web Crawl method enables scanning a Web page and its linked pages. An example shows a content object with a `ContentURL` pointing to a website, along with `CrawlSettings` that specify `DisableChangeHost` as true and `TotalContentCount` as 100. The example also includes `CopyMetaDataToSubContentTree` set to true and `MetaData`.

The Enumerator Manipulation method allows changing any property of a source and feeding it. The original source that is fed will not be damaged and will continue to operate. It is required that the source be defined and actively running within the GEODI project. An example demonstrates providing a different folder scan for an attached Folder Source in the project by setting `ContentURL` to "advancedmode" and using `AdvSettings` to specify `FolderNames`.

If a MediaMon license is available, a Twitter search can be performed using the Enumerator Manipule method. To execute this, a working Twitter source must first be added to the GEODI project and then fed. An example shows using `ContentURL` as "advancedmode" and `AdvSettings` to include `IncludeSearch` set to true and `Queries`.