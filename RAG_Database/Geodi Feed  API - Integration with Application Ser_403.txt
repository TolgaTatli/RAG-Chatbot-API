GEODI employs an integration model designed for receiving data from various applications. This model is compatible with ECM, CMS, and DMS applications, as well as any application capable of providing content via web service or REST API. The system supports different standards for the services it receives.

Supported service standards include the web services of the application itself, Enterprise Content Management (ECM), Content Management System (CMS), Document Content Management (DMS), Sitemap XML, and News Sitemap XML. For web applications that are not continuously active, GEODI can trigger the application to provide data. Data can also be obtained from special web services of an application by adding definition files to `Settings \ FeedEnumeratorMeta`. These definition files utilize C# macro language for mappings, and GEODI can assist in writing these files if documentation for content reception and authorization services is provided.

Under the GEODI Service Connection Standard, an application must be capable of returning document information through an authorized service for feedback. This process requires a Rest API Service Path (URL) along with a User Name and Password, which can be an LDAP or Kerberos User, for calling application services. If the application supports OpenID standards, a valid token can be retrieved and used for an extended period. Information received from the application is then entered into GEODI interfaces, with the system making requests to the application's service at specified times.

The `GetContents` method is a key expected service method used to monitor changes within an application and retrieve its contents. GEODI calls this service at predetermined intervals to receive updates on changed additions. If a .NET SOAP API is implemented that accepts the same parameters and returns the same object as output, a specific attribute should be added to the method. Requests for `GetContents` are made to `[ServiceURL]?m=GetContents` using either GET or POST HTTP methods. Expected errors during this process include 401 Unauthorized access/Access denied, 403 Forbidden, and 511 Network Authentication Required.

Additional parameters for the `GetContents` method include `Api Credential`, which specifies the API user set for GEODI (supporting NTLM, Digest, and Basic Authentication), under whose authority the application should return all contents. The `ChangeKey` parameter is used by GEODI to request content changes that have occurred after a specific value; GEODI retrieves this value from the `ChangeKey` in the last processed `GetContents` result and transmits it for the subsequent scheduled scan. The application can send any value it uses to track changes. The `Page` parameter indicates the currently requested page if a `PageCount` has been returned from the `GetContents` service, and this parameter is also passed as `CurrentKey`. The `GetContents` method returns a JSON object containing content information.

For integrations with Enterprise Content Management (ECM), Content Management System (CMS), and Document Content Management (DMS), while WebDAV support is available, it is not sufficient for incorporating the authorizations of the integrated application, as the WebDAV standard lacks adequate prior knowledge for an ECM. WebDAV, FTP, WebSite, and Standard Sitemap XML can be utilized in scenarios where receiving and publishing data within the GEODI security policy is sufficient without requiring special authorization from the integrated application. Systems that implement CMIS 1.1 (Content Management Interoperability Services) are typically inactive by default or necessitate plug-in installation. These software solutions often offer superior performance and more features through their proprietary APIs, and CMIS integration is not a short-term objective for GEODI.

When using Sitemap XML and News Sitemap XML, the `Urlset` must include `url loc` and `lastmod` values, as scanning is performed by checking the last change based on these. The path specified in `loc` is utilized for views and browsing, and requests support Credentials. This method also allows for the inclusion of system user group and user information, such as LDAP or Kerberos users, in addition to `loc` and `lastmod`, thereby supporting custom Role-based and detailed privileges.