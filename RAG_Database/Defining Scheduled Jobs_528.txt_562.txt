In GEODI 5.1 and above versions, an automatic notification can be provided when a searched phrase is encountered. Tasks to be run at specified times can be configured using jSettings files, which are to be placed in the `Settings/Notifications/TimedNotification` folder. Emails can also be specified to be sent. Definitions placed in this folder do not contain a Macro object. Geodi/Mobidi Office is application-independent. If a subreport is used, the objects to be referenced must access themselves via "Context". Event information can be accessed with `c.GetHttpItem("NoticifationArgs")` in environments that can use macros.

The `Factory.ActionFactory: TimedSendMail` object is used to send emails at a specified time. Its request structure includes fields such as `__type`, `BodyReport`, `Attachments`, `Subject`, `ToMail`, and `Timed`. The `Attachments` field is a list that can contain objects with `Report` and `DisplayName` properties. The `Timed` field specifies the period and offset for scheduling, for example, running every Friday at 22:30 with a `Period` of `Week` and `Value` of 1, and an `Offset` of `Days: 6`, `Hours: 22`, `Minutes: 30`.

For the `TimedSendMail` object, `BodyReport` (path) is the HTML report definition used for the email body, with examples found under `Settings/Notifications/Templates`. `Attachments` is a list where each `Report` (path) specifies the report definition path for an attached file, supporting Zip, HTML, Excel, and CSV report definitions, with examples also in `Settings/Notifications/Templates`. `DisplayName` (string) is the name of the attachment file; if not defined, it is named with an additional order number. `Subject` (string) is the email header, supporting simple macros where `[Query]` represents the query used and `[TotalDoc]` represents the number of results found. `ToMail` (string) allows sending messages to email addresses and supports macros. `Language` (string), if defined, ensures all Localize processes in the email are done with this language. `Timed` is used to determine the start time and repeat period. `Attributes` allow content access using a key given to objects in any environment where macros can be used, such as `c.GetHttpItem("MyNameAttribute")`.

An example configuration for the `Factory.ActionFactory: TimedSendMail` object is provided. This example sets `__type` to "Factory.ActionFactory:TimedSendMail", `BodyReport` to "%App%\\Settings\\Notifications\\Templates\\MySimpleReport.html", `Subject` to "Informative message", and `ToMail` to a semicolon-separated list of email addresses. The `Timed` property is configured with a `Period` of `PeriodType: "Week"` and `Value: 1`, and an `Offset` of `Days: 6`, `Hours: 22`, `Minutes: 30`.

The `Factory.ActionFactory: TimedRunCommand` object is for running a command line task. Its description states that it sends emails when the conditions to be determined are met. The request structure for this object includes fields such as `__type`, `FileName`, `Arguments`, `UseShellExecute`, `CreateNoWindow`, `WorkingDirectory`, `UserName`, `Password`, `Timeout`, and `Timed`. The `Timed` field within this object specifies the start time and repeat period, for instance, running every three months on the 20th day at 10:00, using a `Period` of `Month` with a `Value` of 3, and an `Offset` of `Days: 20`, `Hours: 10`, `Minutes: 0`.

For the `TimedRunCommand` object, its definition values are equivalent to the features in the `ProcessStartInfo` link. Definitions other than `FileName` are optional. The `Timed` property is used to determine the start time and repeat period for the command. An example configuration for `TimedRunCommand` sets `FileName` to "%SystemX86%\\cmd.exe ping 127.0.0.1 -r 9" and specifies a `Timed` period of `PeriodType: "Day"` with `Value: 1`, and an `Offset` of `Hours: 10`, `Minutes: 0`.

The `ScheduleSettings` object is used in the `Timed` definition to specify scheduling. The "Period" defines the beginning of the repetition period. For example, when `PeriodType` "Day" is set to `Value` 2, the trigger time is 0:00 every night for two days. When `PeriodType` "Week" is set to `Value` 1, the trigger time is 0:00 every Sunday. When `PeriodType` "Hour" is set to `Value` 1, the trigger time is set every hour at 0 minutes. The "Offset" is used to change the trigger time; for instance, if 1 is set in `Period.PeriodType` "Day" and `Offset.Hours` value, the trigger time is delayed to 01:00 instead of 00:00 at night. If `Period.PeriodType` "Hour" and `Offset.Minute` value is set to 15, the trigger time will be delayed by 15 minutes every hour.

The `Timed` definition can include "Start" and "End" parameters to set date limits for execution. A task will not run before the date specified in "Start"; if left empty, no lower limit is given. Similarly, a task will not run after the date specified in "End"; if left empty, no upper limit is given. An example demonstrates scheduling a task to run every hour between "2019-12-02" and "2019-12-10" using `Start`, `End`, and a `Period` of `PeriodType: "Hour"`.

Various examples illustrate `Timed` configurations: "Everyday at 10:20" uses `Period: { PeriodType: "Day" }` and `Offset: { Hours:10, Minutes:20 }`. "Every Friday at 17:00" uses `Period: { PeriodType: "Week" }` and `Offset: { Days:6 , Hours:17, Minutes:0 }`. "Second calendar day of each month, 15:00" uses `Period: { PeriodType: "Month" }` and `Offset: { Days:2 , Hours:15, Minutes:0 }`. "Fourth business day of the month 09:00" includes `DayCounting:"WorkDays"` with `Period: { PeriodType: "Month" }` and `Offset: { Days:4 , Hours:9, Minutes:0 }`. "The third quarter of every year" is set with `Period: { PeriodType: "Quarter", Value:3 }`. "The first working day of every January 09:00" uses `DayCounting:"WorkDays"` with `Period: { PeriodType: "Year" }` and `Offset: { Hours:9, Minutes:0 }`. "15:00 on the first Tuesday of every month" and "The first Tuesday of the month or the first business day after 15:00" both use `Period: { PeriodType: "Mounth" }` and `Offset: { Days:3, Hours:15, Minutes:0 }`, with the latter adding `DayCounting:"WorkDays"`.