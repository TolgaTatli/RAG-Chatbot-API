This service allows web applications using Geodi Feed API, specifically the Feed Method (APP → GEODI) or Integration with Application Services (GEODI → APP), to share authority and role information. It is an optional service and not mandatory. Implementation is not required if permission definitions provided for FeedApi are LDAP group/user Sid values. It is only required if the application has submitted its own roles or definitions. Requests are made for addresses defined under GEODI / Settings / RoleProvider, and only a system administrator with access to this address can add this definition. Sample contents are available in a specified folder. If custom authorization is used for FeedApi, the system administrator who provided the GEODI Token should be asked for the address of the Role / Authorization service to identify it. If a .net SOAP API that takes the same parameters and returns the same object as an output is implemented, a specific attribute should be added to the method.

Requests are formatted as `[ServiceURL]?m=GetRoles&user={username}`. Both `{user}` or `{username}` parameters can be used in the ServiceURL. Even if these parameters are not explicitly used, the `request-user` and `request-username` information is passed in the HTTP Header content. The `{user}` parameter represents the unique name of the user logged into GEODI, translated to lowercase via InvariantCulture, and includes information about the user's login method. Examples of `{user}` values include `ldap:domain\user.name`, `geodi:geodiadmin`, `geodi:guest`, `facebook:id`, and `yourapplication:user.id`. The `{username}` parameter only returns a username and does not include any domain information for LDAP users. Security can be increased by adding additional parameters to the ServiceURL definition and requesting additional Headers using the definition setting file on GEODI. The HttpMethod for these requests is GET.

GEODI supports multiple user authentication mechanisms. Such a request can only be made if the application supports Oauth or Oauth2 and the necessary definitions are made in GEODI, or if an ILoginProvider implementation is defined on GEODI. In the event of such a request, it can be assumed that the verification is done by the application. An empty list or empty content can be returned for users that are not recognized. Expected errors include 401 for Unauthorized access or Access denied, 403 for Forbidden, and 511 for Network Authentication Required. An example GEODI settings file for a Role Provider includes fields such as DisplayName, __type, ServiceURL, GEODIRequestHeader, and ActionTargets.

The expected result can be a JSON object containing a `Roles` array, or a comma-separated string of roles. The `Roles` (string array) field contains the roles or detailed privileges of the transmitted user, authorizing the user for all documents in the Permit definitions if they are associated with any of these roles. For GEODI versions 6.1.0.21248 or above, rules can also be transmitted using a more complex structure that includes `Roles`, `OnlyDenyCheck`, `Conditions`, and `Groups` fields. In this advanced usage, the `Roles` array still contains roles and privileges, where a user is authorized for documents in Permit definitions and prohibited from documents in Deny definitions based on these roles. If the `Roles` definition contains statements within the rule, the authorization rule from the `Roles` definition will override other rules.

The `OnlyDenyCheck` (string array) field, available for GEODI 6.1.0.21248 or above, specifies that Permit definitions for transmitted roles are ignored, and only prohibitions included in Deny definitions are checked. If a Deny definition is found, the document is not shown to the user. The `Conditions` (string array) field allows for the creation of rules using "And", "Or", and "-" operators, used if role lists defined in parentheses have at least one of these. Parentheses must be used, even for a single role. The delimiter within the list should be a comma, and space characters not included in the role definition should not be used. If a role in the list is passed as Deny for the document, the list is considered false for that document. Multiple rules in the `Conditions` array are combined with 'or'. It is recommended to use at least one unused group, as GEODI evaluates all roles together, and a negative condition like `-(Cat1)` can include roles from another application.

The `Groups` (string array) field, available for GEODI versions 6.1.0.24366 or above, indicates that the user is part of a GEODI group. While other features primarily manage document viewing authorization, this `Groups` feature allows for the management of all privileges defined on GEODI, such as editing, adding notes, and viewing Source/Enumerator. An example request for `[ServiceURL]?m=GetRoles&user=ldap:domain\user.name` might return a `Roles` array containing values like 'S-151...', 'Administrator', and 'Document1'. For GEODI 6.1.0.21248 and above, a rule example shows a request returning a structure with `Roles` (e.g., 'AllPublic'), `OnlyDenyCheck` (e.g., 'CantSeeIfSecret'), and `Conditions` (e.g., '(Rol1,Rol2) and (Cat1,Cat2) and -(T1)'). This example user sees documents with 'AllPublic' in their Permit Value, cannot see documents with 'Deny AllPublic' in their Permit Value, and cannot see documents with 'CantSeeIfSecret' in their Deny definition, with condition definitions not altering these results. This user can also view documents containing 'Rol1' or 'Rol2', and also 'Cat1' or 'Cat2' at the Permit value, provided they do not contain the 'T1' role.

An example application for this service is a .Net 3.5 WebHandler written in C#. A .net sample WebHandler is also provided.