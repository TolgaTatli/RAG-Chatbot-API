GEODI provides REST API services, enabling the use of query results in applications through the Geodi Query API. With GeodiQueryJS, users can display these results in any desired format or integrate them with libraries such as Angular.js and Vue.js. To utilize either the Standard or Simple API, a Token, Geodi Project name, and Geodi URL information are required.

To display query results in an application using GeodiQueryJS, the GeodiQueryJS.js library must be included in the project, and a template must be specified. The template definition is consistent with tools like Angular and Vue.js. Object properties available for use in the template can be identified from the debug console of the running browser or from the Geodi Query API - Document Search service document. For instance, `{{data.DisplayName}}` is used within HTML template content to display the value of `data.DisplayName`.

For implementing loops and conditions within templates, the `d:r` tag along with `data` and `visible` attribute values can be employed. The `data` attribute is used to specify the data to be iterated in a loop; initially, the `data` value at the template's beginning represents the list of results. Within each `d:r` tag, `data` is converted to the value of the data, and content outside the loop can be accessed using `data.parentdata` if necessary. The `visible` attribute determines if the `d:r` field is displayed based on a valid condition, otherwise, its content is ignored. Even if `visible` is not explicitly used with `data`, the block containing it is checked once with the data. If a check is required for each item within a loop, an additional `d:r` element must be created.

The HttpUtility helper class is available for encode and decode operations. To inspect the properties of an object used in a template, the `{{debugger; }}` expression can be utilized to examine `data` and `context` objects through the console. GeodiQuery.js includes a preset template definition, which allows users to obtain results without needing to define any custom templates.

For more examples related to GeodiQueryJS, users can refer to live demo projects that utilize a token for guest users. Sample code for GeodiQueryJS is accessible at `https://github.com/decesw/html/blob/master/DocumentQuery/Query_GeodiQueryJS.html`. An interface for trying template editing is also available.

REST API results can be exported to any library that supports template rendering, including tools like Angular.js and Vue.js. The results obtained from the Geodi Query API (Query) can be presented by using JSON as required by the specific library. All related examples are available at `https://github.com/decesw/html/tree/master/DocumentQuery`. These samples run using live demo projects, and a token for the guest user is employed. Specific sample code links include `https://github.com/decesw/html/blob/master/DocumentQuery/Query_AngularJS.html`, `https://github.com/decesw/html/blob/master/DocumentQuery/Query_VUEJs.html`, `https://github.com/decesw/html/blob/master/DocumentQuery/BasicQuery_AngularJS.html`, and `https://github.com/decesw/html/blob/master/DocumentQuery/BasicQuery_VUEJs.html`.