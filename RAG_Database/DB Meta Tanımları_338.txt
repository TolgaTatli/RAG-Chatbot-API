GEODI indexes selected or all tables in a database using default behaviors. DBMeta definitions are optional configurations that allow modification of these default behaviors. A DBMeta definition is necessary to index embedded or linked files, or to alter the rows that will be indexed by SQL. DBMeta files are identified by the `*.jsettings` extension and must be placed in the "" folder.

The scope of DBMeta settings can be limited, enabling the creation of multiple meta definitions, each applicable to a distinct table or database. This limitation is achieved using specific keys: `WorkspaceName` defines the WorkSpace(s) where settings apply, `TableFilter` specifies the tables, and `ColumnFilter` targets tables containing particular columns. If a hyphen is used with `ColumnFilter`, it considers tables that do not contain the specified columns, and multiple `ColumnFilter` values imply an AND relationship. The `Columns` key is used to specify columns for indexing or exclusion.

In GEODI, each record is considered a document, similar to how files are processed. By default, the first text column serves as the row's name, which is the content utilized by the `doc:(...)` query. This default naming can be customized for individual tables using `DisplayNameMacro`, which also allows the inclusion of other columns.

GEODI is capable of scanning files that are either referenced by paths within a database or embedded directly as blobs. For this functionality, `File1` typically designates the column holding file names, while `File2` refers to the column containing the blob data, which in an example database is of `bytea` data type. If multiple embedded files exist, the relevant definition needs to be replicated for each. This feature supports various databases including Access, Postgres, Mssql, Oracle, Sqlite, and MySql. It requires the database column to contain a file extension, or if missing and all files are of the same type, the extension can be appended via a macro.

GEODI allows for the indexing of files referenced by links within a record, though this functionality is not available for `*.csv` files. A macro can be used to calculate the file paths, making these files child content of the associated record. If a file path contains multiple files, a separator character can be specified. Additional keys define the name for search appearance, where the extension determines the file type, and the name for search and viewer appearance, from which the extension is derived; these naming options are not applicable to links provided for folders.

For change tracking and versioning, each table requires a primary key column. While GEODI defaults to `ObjectID`, a different column can be designated as the unique ID using a specific definition. The name of the primary column specified in the DBMeta must precisely match its name in the database.

GEODI allows for the indexing of results from an SQL statement, enabling the creation of a new table identified by a `NewName`. The SQL statement must be compatible with the specific database management system. Alternatively, `KeyColumns` can be defined within the SQL query itself by aliasing a column as `P_KEY` or `OBJECTID`. This functionality is supported for file-based databases such as `*.xDeceConnection` and MDB files, requiring the use of standard SQL. It is important to ensure that the SQL query result does not contain multiple columns with the same name.

Row-based authorization is available for tables, SQL results, or Views within GEODI. Authorization is managed using `PermitMacro` and `DenyMacro`, which can incorporate users and GEODI groups, including custom users via `[geodi:username]`. For specifying multiple users or groups, an advanced macro initiated with an equals sign (`=`) is required, whereas a simple macro is suitable for a single group or user. Usernames or groups must be derivable from a column within the table, SQL result, or View. Permissions applied to table rows also extend to their child content, and group names are case-sensitive.

The "Defining Text Result of a Record" feature modifies the GEODI search index, enabling all table content to be found when searched via GEODI based on the provided context naming. The `Content` setting allows for selecting a column's search term for a record or making non-column words searchable, and multiple column names can be included within `Content` for naming purposes. The `Ignore` setting in DBMeta dictates the validity of `Content` settings: `“Ignore”:”False”` activates them, while `“Ignore”:”True”` deactivates them. This functionality is applicable to file-based databases such as `*.xDeceConnection` and MDB.

The display format of records in GEODI can be adjusted using the `TemplateName` key, which points to an HTML template that defines the appearance of records meeting specific criteria. This `.html` template must reside within the `Templates` folder, which is located under the `DBMeta` file, and the corresponding meta definition must also be saved in the `DBMeta` folder. While `TemplateName` provides visual flexibility, its use may result in a performance decrease.

By default, GEODI searches across all tables and columns. To narrow search results to specific columns, the FieldIndex setting must be configured, allowing searches to be limited using the format `columnname:`. Activation requires setting `EnableAutoFieldIndex` to `true` within the project's detail settings under `ContentReaderEnumerators` -> `YourDatabase`, followed by a project re-scan. Re-scanning large datasets can be time-consuming and should be planned accordingly. Once active, column names will be visible in the database discovery results.

GEODI typically discovers all content within a database by default. However, users can opt for sample data discovery, which involves GEODI selecting N random sample rows from each table. This optional sampling can reduce scanning time and storage space. When applied to Folder sources, this sample setting also impacts file-based databases such as Excel, `*.mdb`, and `*.accdb` files.

To support multilingual column names and define aliases, specific definitions are required. `resx` file names must include "fields" and be placed in the `globalization` directory. The `name` value within these files must adhere to the `att{fieldname}` format and correspond to the table's actual field name, with the same key used across different languages. The `value` field contains alternative column names, or aliases, which can be separated by a pipe `|` character for multiple options. If an alias duplicates an existing column name, it will be disregarded. For multilingual displays, only the first alias is considered.

Macros can be created for values such as Document ID and File Path, serving to resolve situations where direct column values are inadequate. The specific sections where macros are applicable are indicated throughout the documentation. A macro's text is a string where column values are enclosed in square brackets `[]`, and a single column can be referenced multiple times. Certain characters within macros require escaping with a backslash, for instance, a backslash itself must be represented as `\\`. If a macro-type setting's value begins with an equals sign `=`, it enables C# macro usage, providing extensive flexibility.

If DBMeta is not functioning as expected, several checks should be performed. First, the syntax of `jsettings` files should be validated, for example, by using `https://jsonformatter.curiousconcept.com/`. Second, verify the accuracy of column, table, and GEODI project names as they appear on the database. Finally, examine the scan error logs, which can be accessed through the developer report in GEODI to review any errors encountered during scanning.