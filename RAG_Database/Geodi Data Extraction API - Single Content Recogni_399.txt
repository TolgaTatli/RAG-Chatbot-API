A Token can be obtained by generating a GEODI Token.

The `RecognizeContent` operation returns entries found by scanners in the current workspace from content sent by the user to GEODI.

A `RecognizeContent` request can be made using the URL `[GEODIURL]/DataExtractionHandler?op=RecognizeContent&wsName=[WSNAME]&content=[ContentJson]&UserSession=[TOKEN]`. The `wsName` parameter specifies the Workspace Name, and the `content` parameter is a JSON object containing content information. Object details for the content can be found in the "Geodi ContentObject - Content Definition Object" document.

An alternative `RecognizeContent` request format is `[GEODIURL]/DataExtractionHandler?op=RecognizeContent&wsName=[WSNAME]&fileName=[FileName]&UserSession=[TOKEN]`. Both filename and content can be sent as byte arrays. An example request URL is `[GEODIURL]/DataExtractionHandler?op=RecognizeContent&wsName=PROJE&fileName=myProj.doc`, with an example HTTP HEADER `Content-Length:1740` for a `1740 byte[] Content` request.

The `RecognizeContent` operation supports `GET` and `POST` HTTP methods.

Expected errors for the `RecognizeContent` operation include `401 Unauthorized access / Access denied`, `403 Forbidden`, `511 Network Authentication Required`, and `501 Server Error`.

The `RecognizeContent` operation returns a JSON object with the structure `{"ElapsedMilliseconds":0, "Entries": [{"OriginalText":"", "Text":"", "StartIndex":0, "Length":1, "Filter":null}]}`.

In the returning value, `ElapsedMilliseconds` indicates the milliseconds spent for recognition, and `Entries` is a list of entrances recognized by GEODI.

Each entry in the `Entries` list contains `OriginalText` (a piece of text where recognition occurs), `Text` (the text of the recognition made within the text), `StartIndex` (OriginalText's starting position within the text, starting from 0), `Length` (OriginalText's length), and `Filter` (the value created for the entry, if any).

Additional fields within an entry include `StartDouble` (the beginning of the value range), `EndDouble` (the end of the range), `IsFixedValue` (whether the value is constant, where False indicates a range value), and `RecognizerID` (the ID of the recognizer that recognizes the word).

The `ValueTypeCode` field is an Enum value corresponding to the value type. The word value type equivalents of these enum values are: `0: Empty`, `1: Object`, `2: DBNull`, `3: Boolean`, `4: Char`, `5: SByte (-128, 127)`, `6: Byte (0, 255)`, `7: Int16 (-32768, 32767)`, and `8: UInt16 (0, 65535)`.

Further `ValueTypeCode` equivalents include: `9: Int32 (-2147483648, 2147483647)`, `10: UInt32 (0, 4294967295)`, `11: Int64 (-9223372036854775808, 9223372036854775807)`, `12: UInt64 (0, 18446744073709551615)`, `13: Single`, `14: Double`, `15: Decimal`, `16: DateTime`, and `18: String`.

An example `RecognizeContent` request is provided with `wsName: "PROJECT"`, `UserSession: "..."`, and a `content` object containing `ContentURL: '~/MyApplication/Content.php?id=1465'`, `DisplayName:'Control list document'`, `ContentDate:'Mon, 04 May 2015 07:38:28 GMT'`, and `ViewURL: '~/MyApplication/ContentView.php?id=1465'`.

Example applications for `RecognizeContent` include `.Net WinForm (C#)` and `HTML - Javascript`.