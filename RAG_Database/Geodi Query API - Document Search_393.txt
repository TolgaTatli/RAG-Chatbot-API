The Standard Query API is a service where all features can be used and objects matching the query are returned. An AdvancedQuery Token is required and must be received by generating a GEODI Token. If an end-user interface is being prepared, the "Displaying search results with templates" page will be more useful. The Query Definition for this API states it returns the list of documents matching the search result, allowing users to search from documents within GEODI Workspace. All current requests and results are available at GeodiJSONService.

The request for the Standard Query API uses the URL format `[GEODIURL]/GeodiJSONService?op=getDocuments&wsName=[WSNAME]&query=[StrorageManagerQueryOptions_JSON]&UserSession=[TOKEN]`. The `wsName` parameter is a string specifying the workspace name to search inside. The `query` parameter is a JSON object where the `SearchString` property is sufficient for all searches, for example, `{ SearchString: "query" }`. Query text syntax rules are available under "GEODI Queries". An optional `SummaryCount` (integer) returns a specified number of summaries if greater than 0, with summary length adjustable via `query.GetSummaryType` parameters. The optional `RunUpdateClientData` (boolean) retrieves additional information provided by tools such as TextPro and FacePro. Both GET and POST HTTP methods are supported.

Expected errors for the Standard Query API include 401 Unauthorized access / Access denied, 403 Forbidden, 511 Network Authentication Required, and 501 Server Error. The current result object is accessible. Example applications for the Standard Query API include GeodiQueryJS Sample, AngularJs Sample, and Vue.js Sample, which provide sample code for editing templates or running the code.

The Simple Query Service includes inputs and outputs containing simplified, basic information that is sufficient for most applications. Generating a GEODI Token is needed for its use. If an end-user interface is being prepared, the "Displaying search results with templates" page will be more useful. The Query Definition for this service states it returns the list of documents matching the search result, allowing users to search from documents within GEODI Workspace.

The request for the Simple Query Service uses the URL format `[GEODIURL]/QueryHandler?op=Query&wsName=[WSNAME]&q=[SearchString]&startIndex=[StartIndex]&endIndex=[EndIndex]&options=[OptionsJSON]&UserSession=[TOKEN]`. The `wsName` parameter is a string for the workspace name to search inside, and `q` is a string for the query text. Query text syntax rules are available under "GEODI Queries". Optional parameters include `StartIndex` (integer) for the query results' starting index (limit 0) and `EndIndex` (integer) for the ending index (limit 0). The `options` parameter allows additional parameters to change the query result. Both GET and POST HTTP methods are supported.

The `options` parameter for the Simple Query Service includes several optional fields. `ContentIDFilter` (integer array) filters the content from which to query. `Envelope` (array `[LonMin(int),LatMin(int),LonMax(int),LatMax(int)]`) returns words within the boundaries of the given BBOX geometry. `LayerIdFilter` (integer array) filters words according to the IDs of the recognizers that recognize these words. `KeywordIdFilter` (integer array) filters words by IDs. If `CalculateCounts` is true, the `NumberOfOccurences` field is calculated in the result returned from the query. If `SummaryFill` is true, summary information is returned in the `Summary` field in the results.

Expected errors for the Simple Query Service include 401 Unauthorized access / Access denied, 403 Forbidden, 511 Network Authentication Required, and 501 Server Error. The return value is a JSON array of objects. Each object contains `ContentID` (ID of the content) and `Content` information. `Content` includes `DisplayName` (the display name of the content, such as filename), `EnumeratorID` (the name of the enumerator that provides the content), `ContentType` (the type of content or extension), `HasViewer` (whether the content has a viewer), `DisableDownload` (whether the content is prevented from downloading by the user), and `HasNote` (whether the content has a note).

The Simple Query Service return value also includes `Summary` information if the `SummaryFill` field in options is true, which contains `SummaryID` and `Text`. `Attributes` provides extra information about the content, including `FolderCanBeShown`, `PDisplayName` (the display name of parent content if it exists), `PId` (the ID of parent content if it exists), and `PcontentType` (the type of parent content if it exists). `NumberOfOccurences` indicates how many times the word has occurred. Examples are provided for requests demonstrating `StartIndex`, `EndIndex`, `SummaryFill`, and `CalculateCounts` options.

Example applications for the Simple Query Service include .Net WinForm (C#), Java, Javascript Sample, AngularJs Sample, and Vue.js Sample.