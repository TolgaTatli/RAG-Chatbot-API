Ready-made map drawing styles are available for selection and use within Dictionary editing and project editing layer selection screens. GEODI map drawing styles are configured using CSS. New styles can be defined by placing a CSS file in the `%AppData%Dece/App/GEODI/SystemStyles` directory or in the `SystemStyles` folder located next to the application. Custom style constraints can be applied based on specific layers.

GEODI's CSS definitions support a cascading architecture, allowing properties like color and background to be sourced from different definitions for a single element, such as a label. Style definitions provide properties for separate definitions for labels, points, lines, areas, and GDI settings. Specific prefixes are used for these edits: `label-...` for label edits, `point-...` for point edits, `polygon-...` for area edits, `line-...` for line edits, and `map-...` for GDI settings. These definitions cannot be used directly but must be contained within a block that specifies the target or class name they will affect. A document specifies the values and types of values that can be used in description fields for all current CSS features.

Style blocks can be defined using several syntaxes: `.[ClassName] { .. }`, `#[Target] {..}`, `#[TypeName] {..}`, or `layer{...}`. A definition within the block named "layer" applies its styles to all geometries.

The inheritance order for blocks that affect a layer follows a specific hierarchy: "layer" → `[TypeName]` → `#[LayerId]` → `#[LayerDisplayName]` → `.[ClassNameDefinedInLayer]` → `.[ClassNameDefinedInGeometry]`. If a geometry is influenced by multiple definitions within this list during the drawing process, the property from the last definition in the order will be applied. To ensure a higher-priority definition always remains valid, the `!important` statement can be used within that definition.

The "layer" definition affects all layers and can be considered analogous to HTML CSS `tagName` definitions. The `[TypeName]` definition affects only specified object type layers; for example, a block definition to affect all user dictionaries can be defined as `GeodiDictionary {..}`. The `#[LayerId]` definition affects only the layer with the specified ID; all Layer ID values used in a project can be accessed through the browser console by typing `CurrentQueryContainer.CurrentWSInfo.Recognizers`, with an example being `GeodiDictionary_462a0511-06ba-4383-9335-0b8c29bd087c {..}` for the World Cities dictionary. The `#[LayerDisplayName]` definition affects only the layer with the specified name, and for multi-language layers, the block name should match the multi-language syntax.

The `.[ClassNameDefinedInLayer]` definition affects layers selected from dictionary editing or project editing interfaces, and its naming can be done within the CSS definition, making it appear in the edit interfaces. The `.[ClassNameDefinedInGeometry]` definition exclusively affects geometry definitions specified at the Layer/Recognizer level, where some recognizer editing interfaces prompt for which class definition to add to a specific type of geometry.

An example demonstrates inheritance where a `.MyCLass` tags a selected layer named `MyLayer`. The `.MyCLass` sets `label-Color` to Red and `label-BackgroundColor` to Gray. A `layer` block sets `label-Color` to Blue. An `#MyLayer` block sets `label-Halo` to White and `label-BackgroundColor` to Black with `!important`. In this scenario, the label color will be Blue from the `layer` definition. The background becomes Black because the `!important` statement in the `#MyLayer` definition elevates its status in the inheritance hierarchy, overriding the gray background from `.MyCLass`. The text edges are set to white, as the `label-Halo` definition is inherited from the `#MyLayer` definition.

Macros can be utilized for style values, though the `[ ]` characters should not be used within these style values. An example shows `.MyCLass_A` using `point-Color:$context.GetColor(context.ID)`, `.MyClass_B` using `point-Color:=Color.FromArgb(200,(int)Math.Abs((context.Geometry.Centroid.Y/10000)%255),(int)Math.Abs((context.Geometry.Centroid.X/10000)%255),(int)Math.Abs((context.Geometry.Centroid.X/10000)%255))`, and `.MyClass_C` using `label-Enable:=c.MapScale>1000`.