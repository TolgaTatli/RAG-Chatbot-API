GEODI employs an integration model that facilitates data reception from various applications. This model is compatible with ECM, CMS, and DMS applications, as well as any application capable of providing content via web service or REST API. The supported standards for this service include the application's own Web Services, Enterprise Content Management (ECM), Content Management System (CMS), Document Content Management (DMS), Sitemap XML, and News Sitemap XML.

For web applications that are not continuously active, GEODI can trigger them to enable data acquisition. Data can be obtained from an application's specialized web services by incorporating definition files into `Settings \ FeedEnumeratorMeta`. These definition files utilize macros for mappings, with C# designated as the macro language. GEODI can also generate these definition files if provided with documentation for the services related to content reception and authorization.

Under the GEODI Service Connection Standard, an application must be capable of returning document information through an authorized service for feedback. This connection necessitates a Rest API Service Path (URL), along with a User Name and Password, which can be an LDAP or Kerberos User, for invoking application services. If the application supports OpenID standards, a valid token can be retrieved and used for an extended duration. Information will be received from the application and integrated into GEODI interfaces, with the system initiating requests to the application's service at specified times.

The `GetContents` method is utilized to monitor changes within an application and retrieve its content. GEODI invokes this service at predetermined intervals to receive information about changed additions. If a .NET SOAP API is implemented that accepts identical parameters and returns the same object as output, a specific attribute should be added to the method. Requests for this service are formatted as `[ServiceURL]?m=GetContents` and support both GET and POST HTTP methods. Expected error responses include 401 Unauthorized access / Access denied, 403 Forbidden, and 511 Network Authentication Required.

Additional information for the `GetContents` service includes `Api Credential`, which refers to the API user configured for GEODI, under whose authority the application should return all content. The `ChangeKey` parameter is not forwarded in the initial request to retrieve all data; if transmitted, GEODI expects content updated after this value. GEODI obtains the `ChangeKey` from the `ChangeKey` value in the last processed `GetContents` result and transmits it for the subsequent scheduled scan, allowing the application to send any value it uses to track changes. The `Page` parameter indicates the currently requested page if a `PageCount` was returned by the `GetContents` service, and this parameter is also passed as `CurrentKey`. The `GetContents` service returns a JSON object containing content information.

GEODI supports integrations with Enterprise Content Management (ECM), Content Management System (CMS), and Document Content Management (DMS) systems. While WebDAV support is available, it is not sufficient for considering the authorizations of the integrated application, as the WebDAV standard does not provide adequate prior knowledge for an ECM. WebDAV, FTP, WebSite, and Standard Sitemap XML can be used when it is sufficient to receive and publish data within GEODI's security policy without requiring special authorization from the integrated application. Systems that implement CMIS 1.1 (Content Management Interoperability Services) are inactive by default or require plug-in installation. These software can provide higher performance and more features with their own APIs, and CMIS integration is not a short-term goal for GEODI.

For Sitemap XML and News Sitemap XML, the `urlset` must contain `url loc` and `lastmod` elements. Scanning is performed by checking the last change according to these values. The path specified on the `loc` is used for views and browsing. Requests for these sitemaps are supported with Credentials. In this method, system user group and user information, such as LDAP or Kerberos users, can be provided in addition to `loc` and `lastmod`, supporting custom Role-based and detailed privileges.