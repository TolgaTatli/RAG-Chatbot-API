GEODI, varsayılan olarak bir veritabanındaki seçili veya tüm tabloları belirli davranışlarla indeksler. DBMeta'lar, bu varsayılan davranışı değiştirmek için kullanılan isteğe bağlı tanımlamalardır. Gömülü veya bağlantılı dosyaları indekslemek ya da SQL'in indeksleyeceği satırları değiştirmek için bir DBMeta tanımlaması gereklidir. DBMeta dosyaları *.jsettings uzantılıdır ve belirtilen "" klasöründe bulunmalıdır.

DBMeta ayarlarının etki alanı sınırlanabilir, bu sayede birden fazla meta tanımı yapılabilir ve her biri ayrı tablo veya veritabanı için geçerli olur. Ayarların geçerli olacağı WorkSpace(ler) `WorkspaceName` ile, tablolar `TableFilter` ile, belirli kolonları içeren veya içermeyen tablolar `ColumnFilter` ile belirlenir; birden çok `ColumnFilter` verilirse ilişki VE'dir. İndekslenecek veya dışarıda kalacak kolonlar ise `Columns` ile tanımlanır. Örneğin, bir `DBView` tanımında `Columns` alanı "-FILEPATH,-SILINECEK,-Hazırlayan,-TARIH,-GEODIFILELINK" olarak belirtilerek bu kolonlar dışarıda bırakılabilir.

Her kayıt GEODI için bir belge olarak ele alınır, tıpkı dosyalar gibi. Varsayılan olarak, ilk metin kolonu satırın adı olur ve bu ad, `doc:(...)` sorgusunun kullandığı içeriktir. `DisplayNameMacro` kullanılarak her bir tablo için satırın adı ayrı ayrı değiştirilebilir ve makroda diğer kolonlar da kullanılabilir. Bir `DBRowDisplayName` tanımı, `DisplayNameMacro` olarak "[TEXT4]/[TEXT2]-[TEXT3]" ifadesini kullanabilir.

GEODI, veritabanında dosya yolları bulunan veya blob olarak veritabanına gömülmüş dosyaları tarayabilir. `File1` sütunu dosyaların isimlerini, `File2` sütunu ise Blob dosyalarını içerir. Oluşturulan veritabanında BLOB dosya kolonu "bytea" veri tipi olarak seçilmiştir. Bu özellik Access, Postgres, Mssql, Oracle, Sqlite ve MySql veritabanlarında kullanılabilir. Verilen sütunda dosya uzantısı bulunması gerekmektedir; eğer kolon değerinde uzantı yoksa ve tüm dosyalar aynı tipte ise makro değerine uzantı eklenebilir.

Gömülü dosyaları indekslerken, tablonun birincil anahtarının olduğu kolon, dosyaların aramalarda ve görüntüleyicilerde görünecek adı ve dosya içeriğinin yer aldığı BLOB/MEMO alanı belirtilmelidir. GEODI dosya içeriğini otomatik olarak belirler. Bir `DBSubContent` tanımı, örneğin "TEST" tablosu için `IDColumnMacro` olarak `[OBJECTID]`, `FileNameColumnMacro` olarak `[FILE1]` ve `FileMemoColumn` olarak "file2" kullanabilir.

Aynı tablo içerisinde birden fazla sütunda gömülü dosya indekslemek için birden fazla `DBSubContent` meta tanımı kullanılabilir. Örneğin, "TQA" tablosu için iki ayrı `DBSubContent` tanımı yapılabilir. Bir tanesi `IDColumnMacro` olarak `[OBJECTID]_1`, `FileNameColumnMacro` olarak `[file1]` ve `FileMemoColumn` olarak "file2" kullanırken; diğeri `IDColumnMacro` olarak `[OBJECTID]_2`, `FileNameColumnMacro` olarak `[dosya1]` ve `FileMemoColumn` olarak "dosya2" kullanabilir.

Tablodaki dosya adı veritabanında yoksa, dosya adı mevcut değerler kullanılarak oluşturulabilir. Örneğin, "CMS.FileContentCore" tablosu için `IDColumnMacro` olarak `[FieldId][VersionNumber][MinorVersionNumber]` ve `FileNameColumnMacro` olarak `[Internalid][Extension]` kullanılabilir. Başka bir örnekte, "Belge" tablosu için `FileNameColumnMacro` olarak `=string.Concat(d["EAID"],"-",d["UretimTarihi"],string.IsNullOrEmpty(d["DF"])?".pdf":d["DF"])` ifadesiyle dosya adı oluşturulabilir; bu örnekte `DF` boşsa PDF uzantısı eklenir. Makro, dosyaları atlamak için boş bir dize döndürebilir.

Bir kayıtta yer alan dosya linkleri ile belirtilen dosyalar da indekslenebilir, ancak bu özellik *.csv dosyaları için desteklenmez. Dosya yolları, yazılacak bir makro ile hesaplanır ve bu dosyalar ilgili satırın alt içeriği (child content) olurlar. Eğer dosya yolunda birden çok dosya varsa, ayraç karakteri belirtilebilir. `DBSubContent` tanımları, `FileFullPathColumnMacro` ve `FileFullPathColumnSplitter` kullanarak farklı dosya yolu indeksleme senaryolarını destekler, örneğin `[PATH]` ile `|` ayraç veya `//server/files/[PATH][FILE].[EXTENTION]` ile `,` ayraç gibi.

Değişenleri tarama ve versiyonlama için her bir tablo için birincil anahtar kolonu gereklidir. GEODI varsayılan olarak `ObjectID` değerini belirler. Ancak, farklı bir kolonun birincil anahtar olarak belirlenmesi, ilgili tanım ile yapılabilir. `KeyColumns` değeri özgün ID değeri olacaktır ve birincil kolon ismi metada veritabanındaki ismi ile aynı yazılmalıdır. Örneğin, "BLOBDataset Deneme" çalışma alanı için `KeyColumns` "BelgeBelgeID" olarak veya "tablo1" için "id" olarak ayarlanabilir.

Bir SQL ifadesinin sonucu indekslenebilir; bu işlemle `NewName` isimli yeni bir tablo oluşturulur. SQL deyimi ilgili Veritabanı Yönetim Sistemi (VTYS) ile uyumlu olmalıdır. `KeyColumns` değeri alternatif olarak SQL içerisinde kolona "as P_KEY" veya "as OBJECTID" yazılarak da belirtilebilir. Bu özellik *.xDeceConnection ve MDB gibi dosya bazlı veritabanları için geçerlidir. Standart SQL kullanılmalı ve yazılan SQL ifadesinin sonucunda birden fazla tekrar eden aynı adlı kolon olmamasına dikkat edilmelidir.

Tablo, SQL veya View satır bazlı yetkilendirilebilir. Yetkilendirme için `PermitMacro` ve `DenyMacro` içinde kullanıcı ve/veya GEODI grupları kullanılabilir. Kendi oluşturulan kullanıcılar için `[geodi:kullanıcıadı]` formatı kullanılabilir. Birden fazla kullanıcı veya grup yazmak için `=` ile başlayan gelişmiş makro kullanılmalıdır, zira basit makro tanımı sadece tek grup/kullanıcı için geçerlidir. Kullanıcı adı veya gruplar, tablo (veya SQL, veya View) içinde bir kolondan üretilebilir olmalıdır. Tabloda yetkilendirilen satırlar, alt içeriklerinde (dosyalarda) da bu yetkileri kullanır. Oluşturulan grup ismi büyük/küçük harf ayrımı yapar.

Satır bazlı yetkilendirme örnekleri arasında, bir SQL sorgu sonucunun yetkilendirilmesi yer alır; burada `TableFilter` "DENEME12" olarak ayarlanır, `PermitMacro` "DECE\\kullanıcıadı" ve `DenyMacro` `[geodi:kullanıcıadı]` olabilir. Grup bazlı yetkilendirme için "test" tablosunda `PermitMacro` `[birimler]` olarak ayarlanabilir. Gelişmiş makro örnekleri, `PermitMacro` içinde `d.Get("birimler").Split(',')` veya `new string[] {d.Get("YETKILI_GRUP"),"S-1-5-21-128668610-1027347169-903626496-1222","geodi:guest"}` gibi ifadeler kullanabilir.

Bir kaydın metin/text sonucunu belirleme özelliği, GEODI arama indeksini değiştirmekte kullanılır. `Content` içinde verilen isimlendirme, GEODI üzerinden arandığında tablodaki tüm içerikleri bulur. Bu özellik ile bir kaydın kolonunun arama kelimesi seçilebilir veya kolon ismi olmayan kelimeler arama kelimesi haline getirilebilir. `Content` içine birden fazla `[Kolondadı]` yazılıp isimlendirilebilir. DBMeta'daki `Ignore` durumu, bu ayarın geçerliliğini kontrol eder: `False` ise `Content` içindeki ayarlar geçerlidir, `True` ise geçerli değildir. Bu özellik *.xDeceConnection ve MDB gibi dosya bazlı veritabanları için geçerlidir.

Kayıtların görünüm şeklini ayarlamak için `TemplateName` anahtarı ile bir HTML şablonu verilebilir. Bu şablon, kriterlere uyan kayıtların görünümünü belirleyecektir. `.html` uzantılı bu şablon, `DBMeta` dosyası altındaki `Templates` klasöründe bulunmalı ve oluşturulan meta `DBMeta` klasörü altında kaydedilmelidir. `TemplateName` kullanımı görsel esneklik sağlasa da performans kaybına neden olabilir. Bir `DB_DLV_View` tanımı, `TemplateName` olarak "PortalAnkaraGeziveMesire.html" belirtebilir.

Varsayılan olarak GEODI aramaları tüm tabloları ve tüm kolonları kapsar. Arama sonucunu kolon bazlı sınırlamak için `FieldIndex` ayarı yapılmalıdır. Bu ayar sonrası "kolonadı:" ile kriterler ilgili kolon ile sınırlandırılacaktır. Bu özelliği etkinleştirmek için proje detay ayarlarından `ContentReaderEnumerators` → `Veritabanınız` → `EnableAutoFieldIndex` ayarı `true` yapılmalı ve proje yeniden taranmalıdır. Büyük veride yeniden tarama zaman alabilir, bu nedenle önceden planlanması faydalıdır. Bu özellik aktif olduğunda, veritabanındaki keşif sonuçlarında kolon adı yazacaktır.

GEODI, varsayılan ayarlarda veritabanı içeriklerinin tümünü keşfeder. İsteğe bağlı olarak veritabanı içeriklerinden örnekleme keşfi yapılabilir, bu sayede tarama süresinden ve depolama alanından kazanç sağlanabilir. GEODI, her tablodan rastgele N örnek satır seçer. Örnekleme ayarı Folder kaynakları için kullanılırsa, dosya bazlı veritabanlarında (excel, *.mdb, *.accdb gibi) da etkili olur.

Kolon adlarını çok dilli yapmak ve eş anlamlı (alias) tanımlamak için belirli tanımlamalar yapılmalıdır. Resx dosya isimleri içinde mutlaka "fields" geçmeli ve bu dosyalar `globalization` dizininde yer almalıdır. Kullanılan `name` değeri `att{fieldname}` şeklinde olmalı ve tabloda olan ile uyuşmalıdır; farklı dillerde aynı anahtar kullanılmalıdır. `value` değeri alternatif kolon adlarını (alias) içerir ve birden çok alternatif `|` ile ayrılabilir. Kullanılan aliaslardan herhangi biri başka bir kolon adı ile aynı olursa dikkate alınmaz. Çok dilli gösterimlerde ilk alias dikkate alınır.

Makrolar, Doküman ID ve Dosya yolu gibi değerler için yazılabilir ve kolon değerlerinin doğrudan yetersiz kaldığı durumları çözmeyi sağlar. Hangi değerler için makro kullanılabileceği ilgili bölümlerde belirtilmiştir. Makro metni, kolonların `[]` arasında verildiği bir metindir ve aynı kolon birden çok kez verilebilir. Makrolarda bazı karakterler escape karakteri (`\`) ile birlikte kullanılmalıdır, örneğin `\` `\\` şeklinde verilmelidir. Tipi makro olan ayarların değeri `=` ile başlarsa C# makro kullanımına geçilir, bu da sınırsız esneklik sağlar.

DBMeta'nın çalışmaması durumunda kontrol edilmesi gerekenler şunlardır: *.jsettings dosyalarının sözdizimi doğrulaması yapılmalıdır, bunun için `https://jsonformatter.curiousconcept.com/` gibi siteler kullanılabilir. Tablo, kolon ve proje isimlerinin veritabanı üzerindeki kolon, tablo ve GEODI proje isimleri ile doğruluğu kontrol edilmelidir. Ayrıca, GEODI üzerinden geliştirici raporu ile taramada alınan hatalar incelenerek tarama hata loglarına bakılmalıdır.