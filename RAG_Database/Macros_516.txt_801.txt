Macros are pieces of code specified by developers that run on the server. They can be used in Reports, javascript files, HTML, and Map CSS. While syntax simplifications exist based on the place of use, the general usage is as described in this document. The macro language is set to C#, allowing the use of all methods of objects accessed via the API.

Macros are typically defined using the syntax `[= ...]`. However, Map CSS and some particular fields do not use square brackets, and further information on this can be found in relevant documents. When square brackets are used inside a macro, they must be written as `\]` instead of `]`. This rule also applies to any other character reserved for JSON.

Macros can either evaluate a value or check a visibility condition. Within a macro, all C# classes and GEODI/MOBIDI Specific classes can be used, with the `d` and `c` classes being important. Examples of macro usage include `[=4*4]`, `[=new Random().Next(0,500)]`, `[=Math.Round(0.47)]`, `[=DateTime.Now]`, and `[="test".ToUpper()]`.

The Data (d) Object's type varies depending on where the macro is used. The related documentation will define its type, and a readme file where definitions are placed will also contain this information. For example, in GEODI reports, the Data object is a `GeodiEntry`, meaning every row is a `GeodiEntry`. An example of using the Data object is `[=d.OutputGeodiContent.DisplayName]`.

The Context (c) Object is an `EvaluatorContext` object that is available wherever a macro is used. It includes helper methods and information about maps, such as details about the geometry being drawn and the scale level. An example of its use is `[=c.ToString(DateTime.Now,"en-US","dd MMM yyyy")]`. The context contains a limited number of helper methods, but more can be accessed via the `context ["HelperName"]` method. A list of all helper classes is available. An example provided is `[=d.OutputGeodiContent.DisplayName]`.

A ConditionMacro serves as a visibility condition for a report, dashboard, or many other definitions, and it must be evaluated to true or false. For instance, an Active Workspace must have the `XX_Enable` key set to true, as demonstrated by `ConditionMacro:'["geodi"].GetWS().GetGenericSetting("XX_Enable",false)'`. Another example is that the user must be a member of the `ACC.Discovery` group, shown as `"ConditionMacro":'=c.HasPermission("Group:ACC.Discovery")'`.