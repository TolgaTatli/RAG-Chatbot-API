Ready-made map drawing styles can be selected and used from Dictionary editing and project editing layer selection screens. GEODI map drawing styles are set with CSS. A new style can be defined by placing a CSS file in `%AppData%Dece/App/GEODI/SystemStyles` or in the `SystemStyles` folder next to the application. Custom style constraints can be applied based on a layer, and CSS definitions support cascading architecture, allowing properties like label color and background to be derived from different definitions.

Style definitions allow for separate property definitions for labels, points, lines, areas, and GDI settings. Specific prefixes are used for these edits: `label-...` for label edits, `point-...` for point edits, `polygon-...` for area edits, `line-...` for line edits, and `map-...` for GDI settings. These definitions cannot be used directly but must be contained within a block that specifies the target or class name they will affect. A document is available that specifies the values and types of values usable in description fields for all current CSS features.

Style blocks can be defined using several syntaxes: `.[ClassName] { .. }`, `#[Target] {..}`, `#[TypeName] {..}`, or `layer{...}`. A definition placed within the block named "layer" will affect all geometries.

The inheritance order for blocks that affect a layer follows a specific hierarchy: `layer` → `[TypeName]` → `#[LayerId]` → `#[LayerDisplayName]` → `.[ClassNameDefinedInLayer]` → `.[ClassNameDefinedInGeometry]`. If a geometry is affected by multiple definitions within this list during the drawing process, the property specified in the last definition in the order will be applied. To ensure a higher definition always takes precedence, the `!important` statement can be used within that definition.

The "layer" definition affects all layers and can be considered analogous to HTML CSS `tagName` definitions. The `[TypeName]` definition affects only specified object type layers. For instance, a block definition intended to affect all user dictionaries can be defined as `GeodiDictionary {..}`. A list of all current types is available.

The `#[LayerId]` definition affects only the layer that possesses the specified ID. All Layer ID values used within a project can be accessed through the browser console by typing `CurrentQueryContainer.CurrentWSInfo.Recognizers`. An example block definition to affect only the World Cities dictionary is `GeodiDictionary_462a0511-06ba-4383-9335-0b8c29bd087c {..}`.

The `#[LayerDisplayName]` definition affects only the layer with the specified name. If a layer has been specified in multiple languages, the block name should be provided using the syntax for multi-language definitions. The `.[ClassNameDefinedInLayer]` definition affects layers selected from the dictionary editing for the layer or project editing interfaces. Naming can be done directly within the CSS definition, and any definition added to the CSS content will then appear in the edit interfaces.

The `.[ClassNameDefinedInGeometry]` definition exclusively affects geometry definitions that are specified at the Layer/Recognizer level. Some recognizer editing interfaces prompt the user to specify which class definition should be added to a particular type of geometry.

An inheritance example demonstrates how style properties are applied. In this example, a `MyClass` tags a selected layer named `MyLayer`. The `.MyCLass` definition sets `label-Color` to Red and `label-BackgroundColor` to Gray. The `layer` definition sets `label-Color` to Blue. The `#MyLayer` definition sets `label-Halo` to White and `label-BackgroundColor` to Black with `!important`. The label is drawn in red. Although the layer defined by `.` attempts to make the background gray, the background becomes black because the `!important` usage in the `#` layer definition elevates its status in the inheritance level. Text edges are set to be white, as the Halo definition is inherited from the `#` layer definition.

Macros can be utilized for style values. Syntax rules for macros are detailed on the "Macros" page. It is specified that the `[ ]` characters should not be used within style values. Examples of macro usage include setting `point-Color` using `$context.GetColor(context.ID)` or `Color.FromArgb(...)`, and setting `label-Enable` based on `c.MapScale>1000`.