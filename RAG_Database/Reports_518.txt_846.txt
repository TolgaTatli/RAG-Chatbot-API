GEODI enables the preparation of custom reports in various formats, including HTML, Text, Excel, Zip, or CSV. A GEODI Pro license is required for reporting functionalities. These reports support Macro and Localization, and Notification E-mail Body definitions are also considered a type of report. The reporting feature can be utilized in many different contexts within GEODI.

Reports necessitate a jSettings file and potentially other files, depending on their specific type. These essential settings files must be located either in Settings/Reports or %appdata%App/Geodi/Settings/Reports. The GEODI Report API is available for interaction with reports, which include types such as Zip Report, CSV Report, Excel Report, and HTML Report. The jSettings file stores various report configurations, including the report's display name, icon, and visibility conditions.

Reports can be conditionally displayed based on specific criteria. The `ConditionMacro` defines a report's visibility. If a report is intended for a specific WorkSpace, the `ActionTarget` setting should be utilized. An example configuration for a report named "MyReport" shows `ActionTargets:"*"` and a `ConditionMacro` set to `'c.HasPermission("DECE.SYSTEMMANAGER")'`, indicating it requires a specific system manager permission for visibility.

The "Pre Query" feature allows for filtering report rows before generation. Using "AndQuery in GenericSettings" can limit the data included in a report; for instance, it can restrict report rows to only contain PDF files. A sample configuration demonstrates limiting a report to only erroneous files by setting `GenericSettings: { "AndQuery": " status:HasCanError" }`. This configuration also specifies the report's ID, display name, icon, type, action targets, and condition macro.

By default, each row within a GEODI report represents a `GeodEntry`, which is a discovered word. This means that every discovered date or IBAN will appear as a distinct row in the report. To alter this behavior and have each row represent content instead, the `GenericSettings` within the report's configuration can be set to include `"OneSummaryPerRecord":true`.

The "Init" function executes before a report is generated. This function can be used to modify data objects. For example, the "Init" function can be configured to change data objects such that each row in the report will represent a layer. This is achieved by setting `Init:['=c.Data=c.Distinct(c.Data,"=string.Concat(context.Data.OutputGeodiContent.SystemContentID,context.Data.RecognizerBackRef.Recognizer.DisplayName )")']`.