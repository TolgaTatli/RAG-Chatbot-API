GEODI, by default, indexes all or selected tables in a database using a default behavior. DBMetas are optional definitions that can be used to alter this default behavior. Defining a DBmeta is necessary to index embedded or linked files, to index SQL, or to change how indexed rows will be viewed. DBmeta files are identified by the `*.jsettings` extension.

The scope of GEODI settings can be limited by specific criteria, enabling the use of multiple meta-definitions, each effective for a restricted scope. These criteria include `WorkspaceName`, which specifies the WorkSpace(s) where settings apply; `TableFilter`, which defines the tables to which settings apply; and `ColumnFilter`, which identifies tables containing or not containing (if '-' is used) specified columns, with multiple columns implying an AND relationship. Additionally, the `Columns` criterion allows for specifying columns to be indexed or excluded, such as excluding `FILEPATH` and `ID` while including `DATE` and `GEODIFILELINK`.

In GEODI, each row is considered a document or content, and GEODI treats rows similarly to other documents. By default, the first text column serves as the row's name, which is the content utilized by the `doc:(…)` query. Users can modify row names for each table by employing the `DisplayNameMacro`. This macro can incorporate other columns, and its rules are detailed at the end of the document. An example macro for display names is `[TEXT4]/[TEXT2]-[TEXT3]`.

GEODI is capable of scanning files that are either referenced by file paths within a database or embedded directly as blobs. In a created database, the BLOB file column is designated with the "bytea" data type. This functionality is compatible with Access, Postgres, Mssql, Oracle, Sqlite, and MySql databases. For files to be indexed, they must have a file extension present in the specified column; if an extension is missing and all files are of the same type, an extension can be appended to the macro value. Key settings for this process include a macro for the file's unique number (`IDColumnMacro`), a macro for the file's name as it appears in searches and viewers (`FileNameColumnMacro`), and the BLOB/MEMO field that contains the file content (`FileMemoColumn`), where GEODI automatically determines the content.

To index multiple embedded files within different columns of the same table, a specific meta-definition can be utilized. An example demonstrates this by defining two `DBSubContent` entries for the "TQA" table. Each entry specifies a unique `IDColumnMacro`, such as `[OBJECTID]_1` and `[OBJECTID]_2`, while sharing the same `FileNameColumnMacro` and `FileMemoColumn` values.

When a database table lacks a file name for an embedded file, a name can be constructed. The `FileContent` column represents the file stream. One method involves using `[Internalid][Extension]` for the `FileNameColumnMacro`. Another approach, suitable for cases where some rows may not have an extension value, uses a macro that concatenates `Internalid` and `CreateDate`, and appends ".pdf" if the `Extension` column is empty. This second method assumes that if no extension is present, the file is a PDF. The macro can also be configured to return an empty string, which would result in skipping certain files.

GEODI supports indexing files that are specified by file links within a record, though CSV files are not supported for this feature. To achieve this, a `FileFullPathColumnMacro` is used to calculate the complete paths for the files, making these files child content of their respective rows. If a file path contains references to multiple files, a `FileFullPathColumnSplitter` character is defined to separate them. Examples include macros like `[PATH]` or `//server/files/[PATH][FILE].[EXTENTION]`, with splitters such as "|" or ",".

For scanning and versioning changes, each table requires a primary column. By default, GEODI uses the `ObjectID` value for this purpose. However, a different column can be designated as the unique ID by specifying its name in the `KeyColumns` definition. It is crucial that the primary column name written in the meta-definition precisely matches its name in the database. Examples of `KeyColumns` values include "DocDocID" or "id".

GEODI allows for indexing the result of an SQL statement by creating a new table, specified by the `NewName` key. The SQL statement provided must be compatible with the database management system in use. Alternatively, the `KeyColumns` can be defined within the SQL statement itself by aliasing a column as "P_KEY" or "OBJECTID". This feature is applicable to file-based connections, such as `*.xDeceConnection` and MDB files, and requires the use of standard SQL. It is essential to ensure that the SQL statement's result does not contain more than one column with the same name.

Row-based authorization in GEODI can be applied at the table, SQL, or view row level. Authorization is managed using `PermitMacro` and `DenyMacro`, which can incorporate individual users or GEODI groups, including `[geodi:username]` for created users. To specify multiple users or groups, the macro definition must begin with an equals sign (`=`) to enable advanced macro usage, whereas simple macros are limited to a single user or group. Usernames or groups for authorization must originate from a column within a table, SQL query, or view. These row-level authorizations extend to associated files, which are considered child content. It is important to note that generated group names are case sensitive.

The "Specifying the Text/Text Result of a Record" feature is used to modify the GEODI search index. This allows for selecting specific search words from a column or transforming words without a column name into search terms, enabling GEODI to find all relevant content within a table when a given nomenclature is searched. Multiple column names can be included and named within the `Content` setting. The `Ignore` state in DBmeta controls the validity of these settings: if `Ignore` is "False", the `Content` settings are active, but if `Ignore` is "True", they are not. This feature is applicable to file-based connections such as `*.xDeceConnection` and MDB files.

The visual presentation of records in GEODI can be customized by providing an HTML template via the `TemplateName` key. This template, which must have a `.html` extension, should be located within the `Templates` folder, which is itself under the `DBMeta` file. The generated meta-definition should also be saved within the `DBMeta` folder. While using a `TemplateName` offers visual flexibility, it may result in a performance penalty.

By default, GEODI's search functionality encompasses all tables and columns. To narrow search results to specific columns, `FieldIndex` settings can be applied. This involves setting "columnname: " to limit the search criteria to the relevant column. To enable this feature, `ContentReaderEnumerators → Your Database → EnableAutoFieldIndex` must be set to `true` within the project detail settings, followed by a rescan of the project. Rescanning large datasets can be time-consuming, necessitating early planning. When `FieldIndex` is active, each database discovery will include the associated column name.

GEODI, by default, discovers all content within databases. However, users have the option to sample and explore database contents, which can conserve both scanning time and storage space. When sampling is enabled, GEODI selects a random number (N) of records from each table. These sampling settings are effective for file-based databases, such as `*.xlsx`, `*.mdb`, and `*.accdb` files, when utilized within folder sources.

To enable multilingual column names and define aliases, specific definitions are required. Resource files (`.resx`) must include "fields" in their names and be located in the globalization directory. Within these files, the `name` value must be `att{fieldname}` and correspond to the field name in the table, with the same key used across different languages. The `value` field contains alternative column names, or aliases, which are separated by a pipe symbol (`|`). If any alias matches an existing column name, it will be ignored. In multilingual representations, only the first alias is taken into account.

Macros can be created for values such as Document ID and File path, addressing situations where direct column values are insufficient. The specific sections of the documentation indicate where macros are applicable. Macro text involves placing column names within square brackets, and the same column can be referenced multiple times. Certain characters, like the backslash (`\`), require an escape character (`\\`) within macros. If the value of a setting whose type is a macro begins with an equals sign (`=`), it enables C# macro usage, providing extensive flexibility.

If a DBMeta configuration is not functioning as expected, several checks can be performed. First, `Jsettings` files should undergo syntax validation, for which online tools like `https://jsonformatter.curiousconcept.com/` can be used. Second, it is important to verify the accuracy of column, table, and GEODI project names by comparing them against their corresponding names in the database. Finally, scan error logs should be examined and analyzed, with errors accessible through GEODI's developer report.