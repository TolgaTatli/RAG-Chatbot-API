GEODI is capable of evaluating databases, which are considered structured data. It can index databases and their file information, including embedded files, by crawling all tables and rows. Users can apply simple rules to limit the scope of indexing to specific tables, rows, or fields, and to customize how rows are displayed.

To define a database connection, the Project Wizard/Database connection feature is used. This process involves setting connection conditions, providing connection parameters (connection string) for read-only access to the database, and identifying the database name if an additional driver, such as ODAC for Oracle, is needed. Users can also make decisions regarding sampled data discovery, specifying the number of records per table, and whether to index and discover embedded or linked files. The "New Connection" option allows users to select the database and define its connection string. Views can be excluded to reduce duplicate data discovery and enhance performance, as they often contain data already present in other tables.

GEODI supports various Database Management Systems (DBMS), though some may require an extra driver installation. DBMS that do not require additional installation include PostGres, Microsoft SQL Server, SqLite, Shape File, CSV File, KML File, SQLCE, SQL express, and Kafka. For Oracle (OleDB), the Oracle ODAC driver (version 12.1.0.2.1 and up) is required. Excel and MS Access necessitate the Access Database Engine 2010. DB2 requires an Oledb Driver. Oracle BigData needs the Microsoft Hive ODBC Driver. Cassandra and MongoDB both require an OLEDB or ODBC driver.

Beyond the Project Wizard, GEODI offers alternative connection methods. File-based databases like SQLite, MDB, and AccDB are automatically indexed if they are found in a directory and are not password-protected; DBMeta can be defined for these. However, Excel files must be indexed as structured content using the Project Wizard. Connection settings configured via Project Wizard/Database can be saved in the *.xDeceConnection format, which are automatically processed, providing a portable and secure method for defining connections.

The default behavior for indexing databases in GEODI is to crawl all tables and rows. By default, tables are expected to have a primary key, but users have the option to index tables without one. Indexing can be customized by choosing a sampling mode to index only a selected number of rows per table, selecting a subset of tables, or limiting columns by their names. Users can also define SQL queries to modify the content to be indexed. Embedded files and file paths are indexed with proper definitions. If rows contain permission information, it can be utilized with proper definitions, and applications like CRM and ERP can be defined as sources. When searching in GEODI, each row is treated as content, and users can define the name and appearance of a record on a database or table-wise basis.

If no results are obtained from database sources, troubleshooting steps include verifying the connection string, which should be tested before saving the project, and checking permissions. Index error logs should be examined, and errors encountered during the scan can be reviewed using the developer report in GEODI. Incorrect DBmetas might also be a cause. Jsettings files should undergo syntax validation, for which a site like `https://jsonformatter.curiousconcept.com/` can be used. Additionally, the correctness of column, table, and GEODI project names, as well as their corresponding names in the Table/Column/Project database, should be confirmed.

If GEODI shows many rows despite no explicit database connection, it is because GEODI, by default, crawls file-based databases such as SQLite or Access, processing them similarly to office or PDF files. Users have the option to configure GEODI to ignore these file-based databases.

When embedded or linked files are not displayed, it is necessary to define a DB meta. The documentation indicates that a specific page provides instructions on how to create these DB metas.

Slow indexing can occur if GEODI is crawling all tables and rows by default; using sampled discovery or narrowing the target can improve speed. Other potential causes include the database serving another application, GEODI indexing speed options being set to low (which should be increased), or the GEODI Server running on a low-capacity machine with insufficient memory or a slow disk, necessitating a check of system requirements.

After the initial index, subsequent indexing, whether scheduled or manual, can create versions for tables that lack a primary key. This process impacts the GEODI index size but does not affect discovery results or reports. GEODI logs errors for such tables, and checking the error log can identify which tables are affected. By default, GEODI requires a primary key (PK) column with a unique value in each row; this situation typically does not occur unless specified otherwise. Adding a PK to tables is considered a best practice. If a table has a PK but errors persist, the primary key column name must be recorded in GEODI by defining a DB meta.

By default, GEODI reads all rows with the same permissions. To implement row-based permissions, a DB meta must be utilized.

GEODI allows for the indexing of embedded files within tables through simple DBmeta definitions. When these files are indexed, GEODI displays the row and the file separately, enabling users to query the file using database attributes. It is also possible to open a CRM application directly through a GEODI search. This is achieved by indexing the CRM database and using a simple DB meta to establish a link that launches the original CRM application, provided the CRM application has a simple URL (query string) that can be constructed using attributes.