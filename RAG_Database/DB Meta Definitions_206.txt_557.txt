GEODI, by default, indexes all or selected database tables. DBMetas are optional definitions used to modify this default behavior. These definitions are necessary for tasks such as indexing embedded or linked files, indexing SQL, or changing how indexed rows are displayed. DBmeta files are identified by the `*.jsettings` extension.

The scope of DBmeta settings can be limited by specific criteria, allowing for multiple meta-definitions, each effective for a restricted scope. These criteria include `WorkspaceName` to apply settings to particular WorkSpaces, `TableFilter` to target specific tables, and `ColumnFilter` for tables that either contain or do not contain (if '-' is used) specified columns, with multiple columns implying an AND relationship. Additionally, the `Columns` criterion allows for the explicit inclusion or exclusion of columns from indexing.

In GEODI, every row is treated as a document or content. By default, the first text column serves as the row's name, which is the content used by the `doc:(…)` query. Users have the option to change row names for each table by utilizing the `DisplayNameMacro`, which also supports the incorporation of other columns.

GEODI can scan files that are either referenced by file paths within the database or embedded as blobs. The `File1` column typically indicates file names, while the `File2` column refers to blob files, with the BLOB file column in a created database selected as "bytea" data type. This functionality is compatible with Access, Postgres, Mssql, Oracle, Sqlite, and MySql databases. Files must have a file extension in the specified column, or if an extension is missing and all files are of the same type, an extension can be added to the macro value.

When indexing files embedded in tables, a macro is used for the file's unique number, and another macro defines the file's name for searches and viewers. The BLOB/MEMO field contains the file content, which GEODI automatically determines. To index multiple embedded files within the same table, a `DBSubContent` meta definition can be employed, allowing for distinct ID column macros for each file while sharing other parameters.

If an embedded file in a table lacks a filename, one can be constructed using existing column values. For example, a filename can be built from `[Internalid][Extension]`. In scenarios where an extension column might be empty, a default extension, such as ".pdf", can be assumed. Macros can also be configured to return an empty string, which would result in skipping the files.

GEODI supports indexing files specified by file links within a record, with the exception of CSV files. A macro is used to calculate the full paths for these files, making them child content of the rows. If a file path contains multiple files, a designated splitter character is used to separate them.

Each table requires a primary column for scanning and versioning changes, with GEODI defaulting to the `ObjectID` value. A different column can be specified as the unique ID using a `DBPKey` definition. The name of the primary column in the meta definition must precisely match its name in the database.

GEODI enables indexing the result of an SQL statement by creating a new table with a specified `NewName`. The SQL statement must be compatible with the relevant Database Management System (DBMS). Alternatively, the `KeyColumns` value can be defined within the SQL statement by aliasing a column as "P_KEY" or "OBJECTID". This feature is valid for file-based connections like `*.xDeceConnection` and MDB, requires standard SQL, and ensures the SQL result does not contain more than one column with the same name.

Row-based authorization in GEODI can be applied to Table, SQL, or View rows. Authorization is managed using `PermitMacro` and `DenyMacro`, which can incorporate user and/or GEODI groups, including `[geodi:username]` for created users. For defining multiple users or groups, the macro must begin with an equals sign (`=`) to enable advanced macro usage, as simple macro definitions are limited to a single group or user. Usernames or groups must be generated from a column within a table, SQL query, or View, and the generated group name is case sensitive. These row authorizations are applied to the table and subsequently utilized for child content.

The "Specifying the Text/Text Result of a Record" feature modifies the GEODI search index. It allows for selecting a search word from a record's column or transforming words without a column name into search terms. Multiple column names can be included and named within the `Content` setting. The `Ignore` state in DBmeta controls the validity of these settings: if `Ignore` is "False", the `Content` settings are active, but if "True", they are not. This feature is valid for file-based connections like `*.xDeceConnection` and MDB.

The visual appearance of records that meet specific criteria can be adjusted using an HTML template specified by the `TemplateName` key. This `.html` template file must be located in the `Templates` folder, which is found under the `DBMeta` file, and the generated meta file should also be saved within the `DBMeta` folder. While using `TemplateName` provides visual flexibility, it may result in a performance penalty.

By default, GEODI's search covers all tables and columns. To limit search results to specific columns, `FieldIndex` settings should be configured, allowing criteria to be restricted to a related column by using "columnname: ". To activate this feature, `ContentReaderEnumerators → Your Database → EnableAutoFieldIndex` must be set to `true` in the project detail settings, followed by a project rescan. Rescanning large datasets can be time-consuming, necessitating early planning. When active, each discovery for a database will include the column name.

GEODI typically discovers all database contents. However, users can choose to sample and explore database contents, which helps conserve scanning time and storage space. GEODI achieves this by sampling a random number (N) of records per table. These sampling settings are effective for File-based databases when used in folder sources, including formats such as `*.xlsx`, `*.mdb`, and `*.accdb`.

Column names can be made multilingual and aliases can be defined through specific configurations. Resource files (`.resx`) must include "fields" in their names and be placed in the globalization directory. The `name` value used must be `att{fieldname}` and correspond to the field name in the table, with the same key used across different languages. The `value` field contains alternative column names (aliases), which can be separated by a pipe (`|`). Any aliases that match another column name will be disregarded, and in multilingual representations, the first alias is prioritized.

Macros can be employed for values such as Document ID and File path to address situations where direct column values are insufficient. The specific contexts where macros can be used are detailed in relevant sections. Macro text involves enclosing column names within square brackets (`[]`), and a single column can be referenced multiple times. Certain characters, such as the backslash (`\`), require an escape character (`\\`) within macros. If a macro-type setting's value begins with an equals sign (`=`), it enables C# macro usage, providing enhanced flexibility.

To troubleshoot issues with DBMeta, several checks can be performed. First, `Jsettings` files should undergo syntax validation, which can be done using online tools. Second, the correctness of column, table, and GEODI project names, as well as their corresponding names in the database, should be verified. Finally, scan error logs should be examined and analyzed, with errors from the scan accessible via the developer report in GEODI.