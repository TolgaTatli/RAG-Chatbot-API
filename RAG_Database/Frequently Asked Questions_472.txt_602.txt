A GEODI Workspace requires a project definition for Data Extraction, Query, and Feed operations. GEODI facilitates the creation of projects to ensure complete isolation of indexes. New projects can be incorporated to address specific needs, such as institution-specific terms or variations in resources intended for searching. However, establishing multiple GEODI projects within an organization complicates access to content from diverse sources. Therefore, preparing a single project is more effective for usage, enabling access to resources included in that project, even if they are not within the user's specific application, subject to authorization limits.

To create a GEODI Workspace, a new project can be initiated from the projects screen. This screen is accessible via the left menu within the interface that is opened using GEODI.exe.

An Enumerator or Connector in GEODI is utilized to designate the resources that GEODI will scan during the project preparation phase. Available resource types include Folders, Web Pages, E-mail, Database, and Dropbox. By configuring and integrating a Content Feed Service resource, which provides access to a web service within an application, GEODI can be enabled to request updated or modified data from that application at predefined intervals, and to manage authorization based on the content.

Recognizers are layers that facilitate content recognition, and they can be defined during the project preparation process within GEODI. A variety of pre-built recognizers are available, such as dictionaries, a Turkish National ID identifier, a Plot/Parcel of the land recognizer, a Kilometer recognizer, and a canonical expression recognizer. These recognizers allow GEODI to display specific data even prior to a search being performed. The DataExtraction API specifically returns only the content identified by the identifiers that have been defined within the project.

GEODI prefers the term "Content" over "Document" because its scanning capabilities extend beyond text from traditional documents to include objects supplied by enumerators. Additionally, GEODI believes that for its customers, the word "document" does not adequately encompass various forms of information such as tweets and E-mails.

To extract information from a text or file using GEODI, users can utilize the Geodi Data Extraction API, also known as Formatter, via its web services.

To query information from the GEODI index, users can employ the Geodi Query API, referred to as Query, through its web services.

When performing a GEODI database scan, if the Database enumerator and specific tables are selected during project preparation, GEODI scans the content as it would an Excel table, indexing known types and texts. To index image or byte array fields as documents, a filename, an image name, and a unique ID are required for update values. This information is then used for the names displayed in query results. To define the source of this information, an XML file, structured as per the example, must be placed in the "Settings \ Reader \ DBMeta" folder within the GEODI application. GEODI utilizes the metadata found in this folder for all database scans.

To submit content from an application for indexing into GEODI, users can leverage the Geodi Feed API, also known as FeedHandler, through its web services.

Tokens are used in GEODI as they contain information regarding accessible services, issuance date, issuing user, validity period, and authorized clients. A Token obtained from GEODI services remains valid for up to 10 years, provided the associated user remains active. This method is considered more secure than distributing usernames and passwords. Users with an authorized username and password can acquire a Token via an interface accessible from a link on the Geodi REST API page. If a user lacks a username and password, they must request a Token from the system administrator, who can then forward it or insert it into the application's configuration file. The system administrator can also utilize the same interface found on the Geodi REST API page.

To utilize GEODI APIs within an application, it is typically sufficient to store the GEODI URL, WorkspaceName, and Token information.

When updating content or privileges via the GEODI feed service, a unique ID is required for the submitted content. The feed service designates ContentObject.Content.ContentId as the content identifier, which, if necessary, must be unique and include the application's name. If ContentId is not provided, the ContentURL ID supplied during the feed operation is used; in such cases, the ContentURL must remain consistent in subsequent requests, otherwise GEODI will treat the submission as new content. Additionally, if available, the content date (ContentObject.ContentDate) and/or content hash information (ContentObject.ForcedContentHash) should be transmitted. The ContentDate must correspond to the transmitted content. Modifying these values, even if the content itself remains unchanged with each feed, will cause GEODI to rescan the content, leading to increased load on both systems.

When privileges for content transmitted via the GEODI feed service are altered, no special action is required. Simply feeding the content again with the same service but updated authorizations is sufficient.

To disable versioning for content communicated through the GEODI feed service, the ContentObject.Mode property should be set to DisableVersions, which corresponds to an integer value of 8. Upon this setting, the previous version of the content will be marked as deleted.

To access the up-to-date properties of the ContentObject structure utilized in GEODI feed services, information can be retrieved by navigating to specific URLs: `http://127.0.0.1:3323/DeceSystemInfoWebHandler?op=ObjectInfo&Name=Geodi.Integration.ContentObject,Geodi.Integration` and `http://127.0.0.1:3323/DeceSystemInfoWebHandler?op=ObjectInfo&Name=Geodi.Integration.IntegrationObject,Geodi.Integration`. Additionally, object documentation is available in the "Geodi ContentObject - İçerik Tanım Nesnesi#İçerikTanımNesnesi-Çokluİçerik" document.

For applications developed with the .NET framework, GEODI provides API classes available for use within the Geodi.Integration.dll RestApi. The .NET examples found in the document pages also utilize this language. The current version of the DLL is located alongside Geodi.exe and is also available next to the examples on the service detail pages.

If GEODI.exe cannot be run directly on the server, GEODI can be configured to operate as an ASP.NET application under IIS, allowing API access via a web server. The setup involves creating a virtual folder for GEODI under IIS and configuring the ASP.NET 4.0 application pool to run in integrated mode. It is important to note that prepared pool scanning operations and GEODI.exe might necessitate elevated privileges compared to standard IIS applications to access the designated project meta location. A .SystemSettings.json file must be created in the same directory as Geodi.exe, containing the "AppDataFolder" setting in JSON format, which specifies the path where GEODI will create projects and store metadata. For compatibility with GEODI.exe, this folder name can be determined by typing "%appdata%" into the Windows Explorer address bar. Further configuration details are available on the "System Configuration - Security Settings" page. An example .SystemSettings.json file is `{ "AppDataFolder":"C:\\GeodiMetaFolder" }`. Once configured, GEODI interfaces can be accessed via `http://[host]/[virtualfolder]/` or `http://[host]/[virtualfolder]/gui`. Note that some available versions under IIS may not correctly open the interface without the trailing slash at `http://[host]/[virtualfolder]/`.